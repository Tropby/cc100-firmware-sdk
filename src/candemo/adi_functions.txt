//-----------------------------------------------------------------------------
//  Copyright (c) WAGO Kontakttechnik GmbH & Co. KG
//
//  PROPRIETARY RIGHTS are involved in the subject matter of this material.
//  All manufacturing, reproduction, use and sales rights pertaining to this
//  subject matter are governed by the license agreement. The recipient of this
//  software implicitly accepts the terms of the license.
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
///  \file     adi_functions.txt
///
///  \version  $Id:
///
///  \brief    Use of ADI-Device Specific Functions
///
///  \author   Dr. Axel WÃ¼ste : WAGO Kontakttechnik GmbH & Co. KG
//-----------------------------------------------------------------------------


  Use of ADI-Device Specific Functions


  Header and Includes:

      //-----------------------------------------------------------------------------
      // include file for CANopen WAGO ADI
      //-----------------------------------------------------------------------------
      #include <dal/canopen_types.h>
      
      //-----------------------------------------------------------------------------
      // global vars for examples
      //-----------------------------------------------------------------------------
      
      int32_t             result;
      uint32_t            nodeID;
      uint32_t            state;
      canopen_com_status  com_state;
      uint8_t             can_data[8]


  Function: CANOPEN_CHANGE_STATE

      Set bus to state run / preoperational / resetnode etc

      adi->CallDeviceSpecificFunction("CANOPEN_CHANGE_STATE",(void*) &result,nodeID, (uint32_t) state);

      nodeID = 0 command to all slaves

      state  = State see CiA 302_2 page 33

              0x05  start node
              0x04  stop node
              0x7F  pre-operational
              0x06  reset node
              0x08  bootup config

      result =  DAL_SUCCESS / DAL_FAILURE


  Function: CANOPEN_STATUS

      Get communication interface status

      adi->CallDeviceSpecificFunction("CANOPEN_STATUS",(void*)&result, (uint32_t) reset,(uint8_t*) &can_com_state)

      resetflags =  error counter reset flags

      result    =  DAL_SUCCESS


  Function: CANOPEN_GET_NODE_ID

      Get local node id

      adi->CallDeviceSpecificFunction("CANOPEN_GET_NODE_ID",(void*)&result);

      result =  node ID


  Function: CANOPEN_GET_LAST_NODE

      Get number of configured nodes

      adi->CallDeviceSpecificFunction("CANOPEN_GET_LAST_NODE",(void*)&result);

      result =  number of configured nodes


  Function: CANOPEN_GET_NODE_DIAG

      get node diagnostic flags of node

      adi->CallDeviceSpecificFunction("CANOPEN_GET_NODE_DIAG",(void*)&result);

      result =  Diagnostic bitflags, see canopen_types.h


  Function: CANOPEN_GET_EMC_MSG

      Test for new emergency error on any slave

      adi->CallDeviceSpecificFunction("CANOPEN_GET_EMC_MSG",(void*)&result,remove,can_data);
    
      remove = 1 read and remove oldest message from list / 0 read last message (no remove)
       
      can_data = last error message

      result =  reset 1 > DAL_SUCCESS
                reset 0 > 0        = no message
                          slave id of error message

  Function: CANOPEN_GET_NODE_EMC_MSG

       Test for new emergency error on slave

       adi->CallDeviceSpecificFunction("CANOPEN_GET_NODE_EMC_MSG",(void*)&result,nodeID,remove,can_data);

       remove = 1 read and remove oldest message from list / 0 read last message (no remove)
     
       can_data = last error message

       result =  0 no message 1 message present


  Function: CANOPEN_SEND_EMC_MSG
       
      send emc message

      adi->CallDeviceSpecificFunction("CANOPEN_SEND_EMC_MSG",uint32_t err_code, uint32_t err_reg, uint8_t * manufac_err)

      parameter  EMC Error Code (1 Byte)
                 Register 1001  (2 Byte)
                 uint8_t* Manufacture spec. error field (5 Bytes)
      
      result : OK = DAL_SUCCESS / Error = DAL_FAILURE (1 Error / 2 inhibit time not expired )


  Function:  CANOPEN_GET_GUARD_ERROR

       Test for new guard error on any slave

       adi->CallDeviceSpecificFunction("CANOPEN_GET_GUARD_ERROR",(void*)&result);

       result =  0 no error / slave id of error sender

  Function: CANOPEN_GET_NODE_GUARD_ERROR

       Test for new guard error on slave

       adi->CallDeviceSpecificFunction("CANOPEN_GET_NODE_GUARD_ERROR",(void*)&result,nodeID);

       result =  0 no error / 1 error present


  Function: CANOPEN_REGISTER_ID

       Set filter for CAN Layer2 frames

       adi->CallDeviceSpecificFunction("CANOPEN_REGISTER_ID",(void*)&result,(uint32_t)regflag ,(uint32_t)MsgID);

       MsgID    = 11Bit/29Bit CAN Message ID
       regflag  = 1 register ID  / 0 unregister ID
       result   = 0 OK / -2 no free index

  Function: CANOPEN_REGISTER_ALL

       Set filter for CAN Layer2 all frames

       adi->CallDeviceSpecificFunction("CANOPEN_REGISTER_ALL",(void*)&result,(uint32_t)regflag);

       regflag  = 1 register ID  / 0 unregister ID
       result   = 0 OK / -2 no free index

  Function: CANOPEN_GETFRAMECOUNT

       Read CAN Layer2 frames numbers

       adi->CallDeviceSpecificFunction("CANOPEN_GETFRAMECOUNT",(void*)&result,(uint32_t)MsgID);

       MsgID    = 11Bit/29Bit CAN Message ID
       result   = messages present / -2 no index entry

  Function: CANOPEN_GETFRAMECOUNTER

       Read CAN Layer2 frames counter

       adi->CallDeviceSpecificFunction("CANOPEN_GETFRAMECOUNTER",(void*)&result,(uint32_t)MsgID);

       MsgID    = 11Bit/29Bit CAN Message ID
       result   = messages counter / -2 no index entry


  Function: CANOPEN_SENDFRAME

       Send CAN Layer2 frame

       adi->CallDeviceSpecificFunction("CANOPEN_SENDFRAME",(void*)&result,(uint32_t)MsgID,can_data,(uint32_t) dlc,(uint32_t) timeout);

       MsgID    = 11Bit/29Bit CAN Message ID
       can_data = Message bytes
       dlc      = dlc byte
       timeout  = timeout in ms / 0 = dont wait
       result   = 0 OK -5 OVERFLOW -3 TIMEOUT


  Function: CANOPEN_GETFRAME

       Get CAN Layer2 frame

       adi->CallDeviceSpecificFunction("CANOPEN_GETFRAME",(void*)&result,(uint32_t)&MsgID,can_data,(uint32_t) timeout);

       MsgID    = 11Bit/29Bit CAN Message ID (returns ID if used in CANOPEN_REGISTER_ALL mode)
       can_data = Message bytes
       timeout  = timeout in ms / 0 = dont wait
       result   = DLC-byte OK -5 OVERFLOW -3 TIMEOUT

  Function: CANOPEN_SDO_READ

      read SDO from node and wait until answer or timeout

      adi->CallDeviceSpecificFunction("CANOPEN_SDO_READ",(void*)&result,
              (uint32_t)nodeID, (uint32_t) index, (uint32_t) subindex,(uint32_t) size,(uint_8 *) data,(uint32_t) timeout);

      size     = size of sdo (max 1536 byte) / 0 = no size given (max 245 bytes)
      data     = SDO data
      index    = OD index
      subindex = OD subindex
      timeout  = timeout in ms (max. 5000ms) / default waittime (500ms)
      result   = Bytes Read / Error Code


  Function: CANOPEN_SDO_WRITE

       Write SDO to node  and wait until answer or timeout
       
       adi->CallDeviceSpecificFunction("CANOPEN_SDO_WRITE",(void*)&result,
              (uint32_t)nodeID, (uint32_t) index, (uint32_t) subindex,(uint32_t) size,(uint_8 *) data,(uint32_t) timeout);

       size     = size of sdo (max 1536 byte)
       data     = SDO data
       index    = OD index
       subindex = OD subindex
       timeout  = timeout in ms (max. 5000ms) / default waittime (500ms)
       result   = DAL_SUCCESS / Error Code

  Function: CANOPEN_SDO_READ_ASYNC

      non blocking read SDO from node 

      adi->CallDeviceSpecificFunction("CANOPEN_SDO_READ_ASYNC",(void*)&result,
              (uint32_t)nodeID, (uint32_t) index, (uint32_t) subindex,
              (uint32_t) size,(uint_8 *) data,(uint32_t) timeout,uint32_t sdo_channel)

      size     = size of sdo (max 1536 byte) / 0 = no size given (max 245 bytes)
      data     = SDO data
      index    = OD index
      subindex = OD subindex
      timeout  = timeout in ms (max. 5000ms) / default waittime (500ms)
      sdo_channel = channel to use (0..15)
      result   = Bytes Read / Error Code


  Function: CANOPEN_SDO_WRITE_ASYNC

       non blocking Write SDO to node / resets canopen_lasterror before write

       adi->CallDeviceSpecificFunction("CANOPEN_SDO_WRITE_ASYNC",(void*)&result,
              (uint32_t)nodeID, (uint32_t) index, (uint32_t) subindex,
              (uint32_t) size,(uint_8 *) data,(uint32_t) timeout,uint32_t sdo_channel)

       size     = size of sdo (max 1536 byte)
       data     = SDO data
       index    = OD index
       subindex = OD subindex
       timeout  = timeout in ms (max. 5000ms) / default waittime (500ms)
       sdo_channel = channel to use (0..15)
       result   = DAL_SUCCESS / Error Code
       
  FUNCTION: CANOPEN_SDO_ADD
  
  	   add SDO object
  	   
  	      adi->CallDeviceSpecificFunction("CANOPEN_SDO_ADD",(void*)&result,
              (uint32_t) index, (uint32_t) entrys, (uint32_t) datalen, (uint32_t) type, (uint32_t) offset)
  	  
  	   index    = OD index
       entrys   = entrys in indexOD subindex
       datalen  = size of one entry (max 1536 byte)
       type     = SDO type
       offset   = offset in process data array
       
   Function: CANOPEN_SDO_READ_DATA

      Read local SDO 

      adi->CallDeviceSpecificFunction("CANOPEN_SDO_READ_DATA",(void*)&result,
              (uint32_t) index, (uint32_t) subindex,(uint32_t) size,(uint_8 *) data;

      data     = SDO data
      size     = size of sdo (max 1536 byte)
      index    = OD index
      subindex = OD subindex
      timeout  = timeout in ms (max. 5000ms) / default waittime (500ms)
      result   = Bytes Read / Error Code


  Function: CANOPEN_SDO_WRITE_DATA

       Write local SDO
     
       adi->CallDeviceSpecificFunction("CANOPEN_SDO_WRITE_DATA",(void*)&result,
              (uint32_t) index, (uint32_t) subindex,(uint32_t) size,(uint_8 *) data);

       size     = size of sdo (max 1536 byte)
       data     = SDO data
       index    = OD index
       subindex = OD subindex
       result   = DAL_SUCCESS / Error Code      
       
       
  FUNCTION: CANOPEN_SENDTIMESTAMP
  
  	   send timestamp   
  	   
  	   adi->CallDeviceSpecificFunction("CANOPEN_SENDTIMESTAMP",(void*)&result,
              canopen_device_timestamp * tminfo)
       tminfo  = struct with time information or null to use system time
              
  
  FUNCTION: CANOPEN_GETTIMESTAMP
  
  	   send timestamp   
  	   
  	   adi->CallDeviceSpecificFunction("CANOPEN_GETTIMESTAMP",(void*)&result,
              canopen_device_timestamp * tminfo)
       tminfo  = struct with last time information
       
       
  Function: CANOPEN_SET_LED

       set CAN led

       adi->CallDeviceSpecificFunction("CANOPEN_SET_LED",(void*)&result,
              (uint32_t) led_mode)

       0  automatic
       1  configuration running:          red   50ms  - green 50ms
       2  configuration fault:            red   200ms - green 200ms
       3  stopped/init OK:                green 200ms - off   800ms
       4  preoperational / no error:      green 200ms - off   200ms
       5  preopertional / warning level:  1 * (red 200ms - off 200ms) - 2 * (green 200ms - off 200ms)
       6  preopertional / guard error:    2 * (red 200ms - off 200ms) - 2 * (green 200ms - off 200ms)
       7  preopertional / sync error:     3 * (red 200ms - off 200ms) - 2 * (green 200ms - off 200ms)
       8  operational / no error:         green
       9  opertional / warning level:     1 * (red 200ms - green 200ms) - green 800ms
       10 opertional / guard error:       2 * (red 200ms - green 200ms) - green 800ms
       11 opertional / sync error:        3 * (red 200ms - green 200ms) - green 800ms
       12 bus off:                        red
       13 fatal error:                    red  200ms - off 200ms
    
       result   = DAL_SUCCESS / Error Code
       
   FUNCTION: CANOPEN_L2OPEN    
   
       open stack in layer2 mode
       
       adi->CallDeviceSpecificFunction("CANOPEN_L2OPEN",(void*)&result,
              (uint32_t) can_baudrate)
              
   FUNCTION: CANOPEN_L2CLOSE    
   
       close stack in layer2 mode
              
       adi->CallDeviceSpecificFunction("CANOPEN_L2CLOSE",(void*)&result);
       
   FUNCTION: CANOPEN_L2RESET    
   
       reset stack in layer2 mode
              
       adi->CallDeviceSpecificFunction("CANOPEN_L2RESET",(void*)&result);
   
       
       

